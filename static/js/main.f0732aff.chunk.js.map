{"version":3,"sources":["app/components/Navbar/index.jsx","app/layouts/PublicLayout/index.jsx","app/index.jsx","serviceWorker.js","index.js"],"names":["Navbar","color","src","width","height","container","useState","menuOpen","setMenuOpen","className","role","aria-label","onClick","aria-hidden","id","PublicLayout","props","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAgDeA,MA9Cf,YAA2D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UAAa,EACxBC,oBAAS,GADe,mBACjDC,EADiD,KACvCC,EADuC,KAGxD,OACE,yBACEC,UAAW,UAAYR,EAAK,cAAUA,GAAU,IAChDS,KAAK,aACLC,aAAW,mBAEX,yBAAKF,UAAW,aAAeJ,EAAS,cAAUA,GAAc,KAC9D,yBAAKI,UAAU,gBACb,uBAAGA,UAAU,eACX,yBAAKP,IAAKA,EAAKC,MAAOA,EAAOC,OAAQA,KAEvC,yBAAKK,UAAU,eAAf,YACA,yBACEA,UAAW,wBAA0BF,EAAW,YAAc,IAC9DK,QAAS,kBAAMJ,GAAaD,IAC5BI,aAAW,QAEX,0BAAME,cAAY,SAClB,0BAAMA,cAAY,SAClB,0BAAMA,cAAY,WAGtB,yBACEC,GAAG,qBACHL,UAAW,eAAiBF,EAAW,YAAc,KAErD,yBAAKE,UAAU,gBACb,uBAAGA,UAAU,8BAAb,SAEF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,WACb,uBAAGA,UAAU,UAAb,SACA,uBAAGA,UAAU,UAAb,kBCrBDM,MAdf,SAAsBC,GACpB,OACE,6BACE,kBAAC,EAAD,CACEX,UAAU,YACVJ,MAAM,OACNG,OAAO,MACPD,MAAM,KACND,IAAI,iD,MCGGe,MARf,SAAaD,GACX,OACE,6BACE,kBAAC,EAAD,QCGcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0732aff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Navbar({ color, src, width, height, container }) {\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n\r\n  return (\r\n    <nav\r\n      className={\"navbar\" + (color ? ` is-${color}` : \"\")}\r\n      role=\"navigation\"\r\n      aria-label=\"main navigation\"\r\n    >\r\n      <div className={\"container\" + (container ? ` is-${container}` : \"\")}>\r\n        <div className=\"navbar-brand\">\r\n          <a className=\"navbar-item\">\r\n            <img src={src} width={width} height={height} />\r\n          </a>\r\n          <div className=\"navbar-item\">The Form</div>\r\n          <div\r\n            className={\"navbar-burger burger\" + (menuOpen ? \"is-active\" : \"\")}\r\n            onClick={() => setMenuOpen(!menuOpen)}\r\n            aria-label=\"menu\"\r\n          >\r\n            <span aria-hidden=\"true\"></span>\r\n            <span aria-hidden=\"true\"></span>\r\n            <span aria-hidden=\"true\"></span>\r\n          </div>\r\n        </div>\r\n        <div\r\n          id=\"navbarBasicExample\"\r\n          className={\"navbar-menu\" + (menuOpen ? \"is-active\" : \"\")}\r\n        >\r\n          <div className=\"navbar-start\">\r\n            <a className=\"navbar-item has-text-white\">Home</a>\r\n          </div>\r\n          <div className=\"navbar-end\">\r\n            <div className=\"navbar-item\">\r\n              <div className=\"buttons\">\r\n                <a className=\"button\">Login</a>\r\n                <a className=\"button\">Sign up</a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport Navbar from \"../../components/Navbar\";\r\n\r\nfunction PublicLayout(props) {\r\n  return (\r\n    <div>\r\n      <Navbar\r\n        container=\"fullwidth\"\r\n        color=\"dark\"\r\n        height=\"110\"\r\n        width=\"30\"\r\n        src=\"https://img.icons8.com/bubbles/2x/form.png\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PublicLayout;\r\n","import React from \"react\";\r\n\r\nimport Public from \"./layouts/PublicLayout\";\r\n\r\nimport \"../App.css\";\r\n\r\nfunction App(props) {\r\n  return (\r\n    <div>\r\n      <Public />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bulma/css/bulma.css\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}